# -*- coding:utf-8 -*-

from flask import redirect, url_for, request, render_template, flash, Flask
from flask_sqlalchemy import SQLAlchemy
import itertools
import copy
import json


class location(object):
    def __init__(self, name, time=1):
        self.name = name
        self.time = time


site = []
site.append(location("Bund"))
site.append(location("People Square"))
site.append(location("Yu Garden"))
site.append(location("Oriental Pearl Tower"))
site.append(location("Nanjing Road"))
site.append(location("New World"))
site.append(location("Nanxiang"))
site.append(location("Fengjing"))
site.append(location("Shaojialou"))
site.append(location("Qibao"))
site.append(location("Guangfulin"))
site.append(location("Zhujiajiao"))
site.append(location("Guyi Garden"))
site.append(location("TianZiFang"))
site.append(location("DDU"))
site.append(location("ECNU zb"))
site.append(location("ECNU mh"))
site.append(location("SJTU"))
site.append(location("Thames Town"))
site.append(location("Song Qingling Cemetery"))
site.append(location("LuXun Park"))
site.append(location("Gucun Park"))
site.append(location("Changfeng Park"))
site.append(location("Century Park"))
site.append(location("Wusong Estuary"))
site.append(location("Shanghai City Planning Exhibition Hall"))
site.append(location("China Arts Palace"))
site.append(location("Wax Museum"))
site.append(location("Chenshan Botanical Garden"))
site.append(location("Shanghai Botanical Garden"))
site.append(location("Dianshan Lake"))
site.append(location("Dishui Lake"))
site.append(location("Zhougongguan"))
site.append(location("Shanghai Museum"))
site.append(location("Sheshan", 2))
site.append(location("Shanghai Zoo", 2))
site.append(location("Wild Animal Park", 2))
site.append(location("Shanghai Aquarium", 2))
site.append(location("Shanghai Science Museum", 2))
site.append(location("BIHAIJINSHA", 2))
site.append(location("Happy Valley", 2))
site.append(location("Jinjiang Park", 2))
site.append(location("Oriental Land", 2))
site.append(location("Disney", 3))
site.append(location("Lodging"))

go = []
for i in range(len(site) - 1):
    go.append(False)

dis_common = [
    [0, 30, 20, 20, 20, 20, 80, 150, 80, 70, 110, 110, 80, 40, 50, 50, 100, 90, 130, 40, 40, 70, 60, 30, 90, 30, 30, 20,
     120, 60, 110, 90, 40, 30, 100, 40, 80, 20, 30, 160, 100, 50, 110, 70, 50],
    [30, 0, 30, 20, 20, 20, 80, 130, 70, 60, 100, 110, 70, 30, 50, 40, 90, 70, 100, 40, 30, 70, 50, 30, 80, 0, 20, 20,
     100, 50, 100, 90, 40, 0, 120, 40, 90, 30, 30, 170, 90, 40, 110, 70, 40],
    [20, 30, 0, 30, 20, 20, 80, 150, 80, 60, 110, 110, 80, 40, 50, 50, 90, 80, 120, 40, 40, 80, 60, 40, 80, 20, 30, 30,
     110, 60, 110, 100, 30, 30, 140, 40, 90, 30, 40, 170, 100, 50, 110, 80, 50],
    [20, 20, 30, 0, 10, 20, 80, 140, 80, 70, 110, 100, 70, 30, 50, 40, 100, 80, 110, 40, 30, 70, 50, 20, 80, 20, 30, 20,
     100, 60, 100, 80, 40, 30, 150, 40, 70, 0, 20, 180, 100, 50, 100, 50, 40],
    [20, 20, 20, 10, 0, 10, 80, 140, 70, 50, 110, 100, 70, 30, 40, 40, 90, 80, 110, 30, 30, 60, 50, 20, 70, 20, 20, 10,
     100, 50, 100, 80, 30, 20, 140, 30, 70, 10, 20, 150, 90, 40, 100, 60, 40],
    [20, 20, 20, 20, 10, 0, 70, 130, 70, 50, 100, 100, 60, 20, 40, 30, 80, 70, 100, 20, 30, 60, 50, 30, 80, 20, 20, 20,
     90, 40, 100, 90, 30, 20, 80, 30, 90, 20, 30, 160, 90, 40, 90, 70, 30],
    [80, 80, 80, 80, 80, 70, 0, 180, 120, 90, 140, 150, 20, 80, 100, 70, 140, 120, 140, 80, 90, 90, 80, 90, 120, 80, 0,
     70, 0, 90, 150, 150, 90, 80, 120, 80, 140, 80, 90, 190, 130, 90, 150, 120, 70],
    [150, 130, 150, 140, 140, 130, 180, 0, 150, 120, 130, 100, 140, 110, 150, 120, 140, 120, 120, 110, 120, 150, 140,
     130, 170, 110, 110, 110, 140, 110, 100, 180, 110, 110, 130, 130, 170, 120, 130, 170, 140, 80, 120, 150, 120],
    [80, 70, 80, 80, 70, 70, 120, 150, 0, 110, 150, 160, 110, 70, 110, 90, 60, 60, 150, 80, 80, 120, 100, 90, 0, 70, 60,
     70, 140, 70, 160, 110, 80, 70, 130, 80, 90, 80, 90, 120, 140, 80, 150, 90, 90],
    [70, 60, 60, 70, 50, 50, 90, 120, 110, 0, 70, 110, 80, 40, 0, 60, 80, 60, 70, 40, 70, 90, 80, 60, 110, 0, 50, 50,
     70, 60, 110, 120, 60, 60, 50, 40, 110, 60, 60, 180, 60, 50, 110, 90, 60],
    [110, 100, 110, 110, 110, 100, 140, 130, 150, 70, 0, 90, 130, 80, 220, 90, 150, 110, 30, 100, 110, 130, 180, 100,
     150, 90, 90, 190, 40, 100, 90, 160, 100, 100, 30, 90, 150, 120, 100, 200, 50, 100, 110, 130, 90],
    [110, 110, 110, 100, 100, 100, 150, 100, 160, 110, 90, 0, 120, 110, 130, 110, 220, 160, 110, 90, 120, 150, 110, 120,
     160, 110, 110, 100, 80, 120, 0, 180, 110, 110, 80, 80, 170, 110, 120, 210, 80, 120, 50, 150, 110],
    [80, 70, 80, 70, 70, 60, 20, 140, 110, 80, 130, 120, 0, 70, 90, 60, 0, 130, 140, 70, 80, 70, 70, 80, 110, 70, 80,
     70, 130, 90, 140, 140, 70, 80, 120, 70, 130, 70, 80, 180, 130, 80, 140, 110, 60],
    [40, 30, 40, 30, 30, 20, 80, 110, 70, 40, 80, 110, 70, 0, 50, 50, 80, 70, 90, 40, 40, 60, 60, 30, 80, 20, 20, 20,
     80, 40, 110, 90, 0, 30, 70, 40, 80, 30, 30, 130, 80, 40, 110, 70, 50],
    [50, 50, 50, 50, 40, 40, 100, 150, 110, 0, 220, 130, 90, 50, 0, 60, 110, 110, 140, 60, 30, 90, 90, 50, 70, 40, 50,
     60, 130, 80, 130, 110, 50, 60, 120, 60, 110, 50, 50, 210, 130, 70, 130, 100, 60],
    [50, 40, 50, 40, 40, 30, 70, 120, 90, 60, 90, 110, 60, 50, 60, 0, 90, 80, 100, 30, 40, 60, 20, 50, 80, 40, 40, 40,
     100, 50, 110, 110, 40, 40, 80, 40, 100, 40, 50, 190, 90, 40, 100, 80, 0],
    [100, 90, 90, 100, 90, 80, 140, 140, 60, 80, 150, 220, 0, 80, 110, 90, 0, 20, 140, 90, 100, 130, 110, 90, 140, 80,
     70, 90, 160, 60, 200, 130, 100, 90, 120, 90, 130, 100, 100, 130, 130, 70, 150, 100, 90],
    [90, 70, 80, 80, 80, 70, 120, 120, 60, 60, 110, 160, 130, 70, 110, 80, 20, 0, 110, 80, 80, 110, 100, 90, 130, 70,
     80, 70, 120, 70, 150, 140, 80, 70, 110, 80, 140, 80, 90, 130, 110, 50, 140, 110, 80],
    [130, 100, 120, 110, 110, 100, 140, 120, 150, 70, 30, 110, 140, 90, 140, 100, 140, 110, 0, 110, 110, 130, 120, 110,
     160, 100, 100, 100, 30, 130, 110, 170, 100, 110, 50, 110, 160, 110, 110, 160, 50, 110, 120, 140, 100],
    [40, 40, 40, 40, 30, 20, 80, 110, 80, 40, 100, 90, 70, 40, 60, 30, 90, 80, 110, 0, 50, 70, 40, 50, 90, 30, 30, 40,
     90, 40, 90, 100, 40, 40, 100, 20, 100, 40, 50, 140, 90, 40, 90, 80, 30],
    [40, 30, 40, 30, 30, 30, 90, 120, 80, 70, 110, 120, 80, 40, 30, 40, 100, 80, 110, 50, 0, 70, 50, 50, 60, 20, 30, 20,
     110, 60, 120, 110, 40, 30, 100, 50, 100, 40, 50, 190, 100, 50, 120, 80, 40],
    [70, 70, 80, 70, 60, 60, 90, 150, 120, 90, 130, 150, 70, 60, 90, 60, 130, 110, 130, 70, 70, 0, 80, 80, 70, 70, 0,
     60, 130, 80, 140, 140, 70, 70, 120, 80, 130, 70, 80, 220, 120, 80, 140, 110, 60],
    [60, 50, 60, 50, 50, 50, 80, 140, 100, 80, 180, 110, 70, 60, 90, 20, 110, 100, 120, 40, 50, 80, 0, 60, 90, 40, 50,
     50, 120, 60, 110, 120, 60, 50, 100, 40, 110, 50, 60, 200, 110, 70, 110, 90, 20],
    [30, 30, 40, 20, 20, 30, 90, 130, 90, 60, 100, 120, 80, 30, 50, 50, 90, 90, 110, 50, 50, 80, 60, 0, 80, 30, 30, 30,
     100, 60, 110, 70, 50, 40, 110, 50, 60, 20, 10, 190, 100, 60, 110, 40, 50],
    [90, 80, 80, 80, 70, 80, 120, 170, 0, 110, 150, 160, 110, 80, 70, 80, 140, 130, 160, 90, 60, 70, 90, 80, 0, 70, 80,
     80, 150, 100, 170, 170, 90, 70, 200, 110, 130, 120, 130, 260, 150, 110, 170, 140, 80],
    [30, 0, 20, 20, 20, 20, 80, 110, 70, 0, 90, 110, 70, 20, 40, 40, 80, 70, 100, 30, 20, 70, 40, 30, 70, 0, 20, 0, 100,
     50, 100, 90, 30, 0, 130, 40, 80, 20, 30, 140, 90, 30, 100, 70, 40],
    [30, 20, 30, 30, 20, 20, 0, 110, 60, 50, 90, 110, 80, 20, 50, 40, 70, 80, 100, 30, 30, 0, 50, 30, 80, 20, 0, 20, 90,
     40, 110, 80, 30, 20, 80, 40, 70, 30, 30, 130, 90, 40, 100, 50, 40],
    [20, 20, 30, 20, 10, 20, 70, 110, 70, 50, 190, 100, 70, 20, 60, 40, 90, 70, 100, 40, 20, 60, 50, 30, 80, 0, 20, 0,
     100, 50, 100, 90, 30, 20, 130, 40, 80, 20, 30, 150, 90, 40, 100, 70, 40],
    [120, 100, 110, 100, 100, 90, 0, 140, 140, 70, 40, 80, 130, 80, 130, 100, 160, 120, 30, 90, 110, 130, 120, 100, 150,
     100, 90, 100, 0, 100, 70, 170, 100, 110, 30, 90, 160, 110, 110, 170, 40, 150, 80, 140, 100],
    [60, 50, 60, 60, 50, 40, 90, 110, 70, 60, 100, 120, 90, 40, 80, 50, 60, 70, 130, 40, 60, 80, 60, 60, 100, 50, 40,
     50, 100, 0, 120, 110, 60, 60, 90, 50, 100, 60, 60, 130, 100, 40, 120, 70, 50],
    [110, 100, 110, 100, 100, 100, 150, 100, 160, 110, 90, 0, 140, 110, 130, 110, 200, 150, 110, 90, 120, 140, 110, 110,
     170, 100, 110, 100, 70, 120, 0, 180, 110, 110, 80, 80, 170, 110, 120, 210, 80, 120, 50, 150, 110],
    [90, 90, 100, 80, 80, 90, 150, 180, 110, 120, 160, 180, 140, 90, 110, 110, 130, 140, 170, 100, 110, 140, 120, 70,
     170, 90, 80, 90, 170, 110, 180, 0, 100, 100, 150, 110, 50, 80, 70, 170, 150, 110, 170, 80, 110],
    [40, 40, 30, 40, 30, 30, 90, 110, 80, 60, 100, 110, 70, 0, 50, 40, 100, 80, 100, 40, 40, 70, 60, 50, 90, 30, 30, 30,
     100, 60, 110, 100, 0, 30, 90, 40, 100, 40, 40, 180, 90, 40, 100, 80, 40],
    [30, 0, 30, 30, 20, 20, 80, 110, 70, 60, 100, 110, 80, 30, 60, 40, 90, 70, 110, 40, 30, 70, 50, 40, 70, 0, 20, 20,
     110, 60, 110, 100, 30, 0, 120, 40, 90, 30, 40, 170, 100, 40, 110, 70, 40],
    [100, 120, 140, 150, 140, 80, 120, 130, 130, 50, 30, 80, 120, 70, 120, 80, 120, 110, 50, 100, 100, 120, 100, 110,
     200, 130, 80, 130, 30, 90, 80, 150, 90, 120, 0, 70, 140, 90, 90, 220, 30, 90, 80, 120, 80],
    [40, 40, 40, 40, 30, 30, 80, 130, 80, 40, 90, 80, 70, 40, 60, 40, 90, 80, 110, 20, 50, 80, 40, 50, 110, 40, 40, 40,
     90, 50, 80, 110, 40, 40, 70, 0, 100, 40, 50, 150, 80, 50, 70, 80, 40],
    [80, 90, 90, 70, 70, 90, 140, 170, 90, 110, 150, 170, 130, 80, 110, 100, 130, 140, 160, 100, 100, 130, 110, 60, 130,
     80, 70, 80, 160, 100, 170, 50, 100, 90, 140, 100, 0, 70, 110, 160, 150, 150, 160, 70, 100],
    [20, 30, 30, 0, 10, 20, 80, 120, 80, 60, 120, 110, 70, 30, 50, 40, 100, 80, 110, 40, 40, 70, 50, 20, 120, 20, 30,
     20, 110, 60, 110, 80, 40, 30, 90, 40, 70, 0, 20, 180, 100, 50, 100, 60, 40],
    [30, 30, 40, 20, 20, 30, 90, 130, 90, 60, 100, 120, 80, 30, 50, 50, 100, 90, 110, 50, 50, 80, 60, 10, 130, 30, 30,
     30, 110, 60, 120, 70, 40, 40, 90, 50, 110, 20, 0, 160, 100, 60, 110, 50, 50],
    [160, 170, 170, 180, 150, 160, 190, 170, 120, 180, 200, 210, 180, 130, 210, 190, 130, 130, 160, 140, 190, 220, 200,
     190, 260, 140, 130, 150, 170, 130, 210, 170, 180, 170, 220, 150, 160, 180, 160, 0, 180, 160, 190, 180, 190],
    [100, 90, 100, 100, 90, 90, 130, 140, 140, 60, 50, 80, 130, 80, 130, 90, 130, 110, 50, 90, 100, 120, 110, 100, 150,
     90, 90, 90, 40, 100, 80, 150, 90, 100, 30, 80, 150, 100, 100, 180, 0, 100, 90, 120, 90],
    [50, 40, 50, 50, 40, 40, 90, 80, 80, 50, 100, 120, 80, 40, 70, 40, 70, 50, 110, 40, 50, 80, 70, 60, 110, 30, 40, 40,
     150, 40, 120, 110, 40, 40, 90, 50, 150, 50, 60, 160, 100, 0, 110, 80, 40],
    [110, 110, 110, 100, 100, 90, 150, 120, 150, 110, 110, 50, 140, 110, 130, 100, 150, 140, 120, 90, 120, 140, 110,
     110, 170, 100, 100, 100, 80, 120, 50, 170, 100, 110, 80, 70, 160, 100, 110, 190, 90, 110, 0, 130, 100],
    [70, 70, 80, 50, 60, 70, 120, 150, 90, 90, 130, 150, 110, 70, 100, 80, 100, 110, 140, 80, 80, 110, 90, 40, 140, 70,
     50, 70, 140, 70, 150, 80, 80, 70, 120, 80, 70, 60, 50, 180, 120, 80, 130, 0, 80],
    [50, 40, 50, 40, 40, 30, 70, 120, 90, 60, 90, 110, 60, 50, 60, 0, 90, 80, 100, 30, 40, 60, 20, 50, 80, 40, 40, 40,
     100, 50, 110, 110, 40, 40, 80, 40, 100, 40, 50, 190, 90, 40, 100, 80, 0]]

dis_car = [
    [0, 15, 14, 23, 14, 29, 41, 65, 48, 37, 70, 60, 34, 22, 29, 23, 48, 52, 58, 25, 28, 32, 29, 27, 41, 17, 23, 20, 64,
     30, 59, 74, 21, 13, 53, 30, 55, 25, 30, 68, 57, 28, 62, 44, 23],
    [15, 0, 11, 18, 8, 17, 33, 60, 40, 31, 63, 52, 29, 12, 23, 19, 41, 45, 53, 19, 22, 28, 24, 28, 34, 3, 19, 9, 57, 26,
     52, 68, 10, 3, 46, 24, 49, 18, 25, 0, 50, 24, 55, 39, 19],
    [14, 11, 0, 18, 9, 11, 36, 60, 40, 34, 64, 57, 31, 16, 27, 21, 44, 45, 52, 22, 24, 30, 27, 22, 37, 16, 20, 19, 61,
     32, 56, 66, 14, 14, 49, 27, 45, 18, 19, 64, 54, 24, 60, 33, 21],
    [23, 18, 18, 0, 12, 23, 42, 67, 48, 39, 71, 61, 37, 23, 22, 26, 48, 52, 59, 27, 14, 35, 31, 21, 35, 17, 20, 20, 65,
     33, 60, 72, 20, 13, 54, 32, 52, 1, 18, 71, 59, 30, 64, 42, 26],
    [14, 8, 9, 12, 0, 21, 36, 62, 0, 33, 67, 58, 31, 16, 25, 19, 43, 47, 56, 21, 20, 30, 26, 25, 37, 11, 27, 11, 61, 29,
     57, 69, 14, 9, 49, 26, 49, 14, 21, 65, 55, 24, 59, 38, 19],
    [29, 17, 11, 23, 21, 0, 35, 57, 37, 34, 62, 55, 30, 9, 25, 23, 38, 42, 49, 23, 24, 29, 27, 25, 36, 10, 20, 15, 60,
     24, 55, 67, 8, 8, 49, 27, 47, 18, 23, 62, 53, 22, 58, 35, 23],
    [41, 33, 36, 42, 36, 35, 0, 54, 54, 30, 57, 47, 5, 50, 33, 30, 46, 46, 46, 36, 41, 20, 28, 67, 34, 44, 55, 44, 51,
     40, 47, 86, 48, 45, 40, 23, 61, 58, 64, 65, 44, 34, 49, 53, 30],
    [65, 60, 60, 67, 62, 57, 54, 0, 53, 48, 41, 40, 56, 60, 74, 57, 44, 44, 31, 54, 72, 62, 57, 67, 77, 66, 60, 69, 32,
     52, 40, 73, 59, 62, 45, 48, 58, 77, 67, 56, 41, 45, 42, 67, 57],
    [48, 40, 40, 48, 0, 37, 54, 53, 0, 37, 64, 64, 49, 48, 47, 46, 27, 31, 53, 42, 46, 51, 44, 33, 57, 54, 33, 54, 61,
     27, 64, 50, 46, 50, 58, 36, 28, 50, 34, 52, 55, 36, 65, 29, 46],
    [37, 31, 34, 39, 33, 34, 30, 48, 37, 0, 54, 41, 25, 37, 41, 24, 29, 30, 37, 30, 38, 26, 28, 52, 42, 30, 35, 34, 47,
     24, 40, 69, 34, 28, 35, 13, 43, 40, 49, 48, 39, 21, 43, 38, 24],
    [70, 63, 64, 71, 67, 62, 57, 41, 64, 54, 0, 43, 56, 64, 75, 58, 60, 61, 15, 56, 72, 61, 61, 71, 76, 64, 65, 69, 12,
     55, 44, 90, 64, 62, 15, 52, 75, 76, 71, 74, 16, 49, 44, 71, 58],
    [60, 52, 57, 61, 58, 55, 47, 40, 64, 41, 43, 0, 44, 59, 63, 46, 55, 55, 44, 45, 60, 49, 49, 74, 64, 53, 59, 57, 30,
     51, 1, 95, 56, 50, 29, 39, 70, 65, 72, 74, 36, 44, 15, 65, 46],
    [34, 29, 31, 37, 31, 30, 5, 56, 49, 25, 56, 44, 0, 43, 29, 31, 44, 44, 48, 34, 38, 17, 29, 63, 33, 40, 51, 41, 53,
     39, 49, 84, 45, 40, 42, 21, 59, 54, 60, 64, 46, 35, 51, 50, 31],
    [22, 12, 16, 23, 16, 9, 50, 60, 48, 37, 64, 59, 43, 0, 28, 23, 41, 41, 49, 19, 26, 32, 28, 23, 38, 16, 16, 19, 57,
     28, 56, 66, 8, 12, 50, 28, 48, 24, 32, 61, 55, 21, 59, 38, 23],
    [29, 23, 27, 22, 25, 25, 33, 74, 47, 41, 75, 63, 29, 28, 0, 23, 46, 62, 68, 37, 18, 23, 29, 28, 23, 25, 36, 25, 69,
     44, 65, 70, 31, 26, 59, 38, 50, 26, 26, 76, 64, 41, 68, 34, 23],
    [23, 19, 21, 26, 19, 23, 30, 57, 46, 24, 58, 46, 31, 23, 23, 0, 40, 44, 51, 13, 20, 29, 5, 41, 33, 24, 27, 25, 54,
     28, 50, 76, 24, 19, 44, 21, 60, 32, 38, 63, 48, 21, 53, 50, 0],
    [48, 41, 44, 48, 43, 38, 46, 44, 27, 29, 60, 55, 44, 41, 46, 40, 0, 6, 45, 34, 55, 43, 37, 44, 58, 49, 38, 51, 52,
     30, 55, 54, 42, 45, 49, 29, 34, 59, 45, 35, 42, 29, 57, 35, 40],
    [52, 45, 45, 52, 47, 42, 46, 44, 31, 30, 61, 55, 44, 41, 62, 44, 6, 0, 46, 41, 56, 45, 43, 50, 60, 50, 44, 53, 54,
     35, 57, 57, 43, 46, 51, 30, 36, 61, 50, 37, 44, 29, 59, 36, 44],
    [58, 53, 52, 59, 56, 49, 46, 31, 53, 37, 15, 44, 48, 49, 68, 51, 45, 46, 0, 45, 63, 53, 48, 58, 68, 58, 51, 60, 12,
     42, 44, 78, 50, 53, 19, 39, 62, 68, 58, 61, 24, 36, 43, 58, 51],
    [25, 19, 22, 27, 21, 23, 36, 54, 42, 30, 56, 45, 34, 19, 37, 13, 34, 41, 45, 0, 27, 32, 15, 28, 40, 18, 22, 23, 50,
     23, 45, 76, 22, 16, 39, 17, 56, 28, 36, 56, 43, 16, 48, 46, 13],
    [28, 22, 24, 14, 20, 24, 41, 72, 46, 38, 72, 60, 38, 26, 18, 20, 55, 56, 63, 27, 0, 33, 29, 29, 30, 25, 30, 22, 70,
     42, 65, 74, 31, 26, 59, 37, 53, 19, 26, 76, 64, 42, 68, 43, 20],
    [32, 28, 30, 35, 30, 29, 20, 62, 51, 26, 61, 49, 17, 32, 23, 29, 43, 45, 53, 32, 33, 0, 32, 60, 22, 37, 48, 37, 60,
     41, 55, 76, 42, 38, 49, 24, 56, 51, 57, 66, 53, 37, 58, 45, 29],
    [29, 24, 27, 31, 26, 27, 28, 57, 44, 28, 61, 49, 29, 28, 29, 5, 37, 43, 48, 15, 29, 32, 0, 42, 37, 22, 28, 26, 56,
     29, 52, 78, 25, 19, 45, 22, 61, 32, 38, 59, 49, 20, 54, 50, 5],
    [27, 28, 22, 21, 25, 25, 67, 67, 33, 52, 71, 74, 63, 23, 28, 41, 44, 50, 58, 28, 29, 60, 42, 0, 41, 28, 0, 31, 63,
     29, 66, 58, 23, 25, 60, 39, 38, 24, 5, 65, 65, 28, 70, 27, 41],
    [41, 34, 37, 35, 37, 36, 34, 77, 57, 42, 76, 64, 33, 38, 23, 33, 58, 60, 68, 40, 30, 22, 37, 41, 0, 37, 48, 37, 71,
     55, 67, 72, 41, 37, 61, 36, 52, 42, 37, 78, 65, 52, 69, 41, 33],
    [17, 3, 16, 17, 11, 10, 44, 66, 54, 30, 64, 53, 40, 16, 25, 24, 49, 50, 58, 18, 25, 37, 22, 28, 37, 0, 23, 7, 57,
     25, 52, 66, 11, 5, 46, 24, 48, 16, 23, 62, 50, 23, 55, 37, 24],
    [23, 19, 20, 20, 27, 20, 55, 60, 33, 35, 65, 59, 51, 16, 36, 27, 38, 44, 51, 22, 30, 48, 28, 0, 48, 23, 0, 25, 56,
     20, 58, 66, 18, 20, 52, 31, 45, 19, 19, 59, 57, 20, 63, 34, 27],
    [20, 9, 19, 20, 11, 15, 44, 69, 54, 34, 69, 57, 41, 19, 25, 25, 51, 53, 60, 23, 22, 37, 26, 31, 37, 7, 25, 0, 61,
     29, 56, 70, 15, 6, 50, 28, 52, 21, 30, 65, 54, 26, 59, 41, 25],
    [64, 57, 61, 65, 61, 60, 51, 32, 61, 47, 12, 30, 53, 57, 69, 54, 52, 54, 12, 50, 70, 60, 56, 63, 71, 57, 56, 61, 0,
     51, 36, 85, 59, 56, 10, 45, 70, 71, 76, 69, 11, 45, 36, 66, 54],
    [30, 26, 32, 33, 29, 24, 40, 52, 27, 24, 55, 51, 39, 28, 44, 28, 30, 35, 42, 23, 42, 41, 29, 29, 55, 25, 20, 29, 51,
     0, 55, 61, 23, 26, 49, 26, 41, 38, 31, 63, 45, 17, 59, 30, 28],
    [59, 52, 56, 60, 57, 55, 47, 40, 64, 40, 44, 1, 49, 56, 65, 50, 55, 57, 44, 45, 65, 55, 52, 66, 67, 52, 58, 56, 36,
     55, 0, 95, 56, 50, 29, 39, 70, 65, 72, 74, 36, 44, 15, 65, 50],
    [74, 68, 66, 72, 69, 67, 86, 73, 50, 69, 90, 95, 84, 66, 70, 76, 54, 57, 78, 76, 74, 76, 78, 58, 72, 66, 66, 70, 85,
     61, 95, 0, 71, 73, 84, 70, 40, 78, 60, 52, 79, 68, 93, 44, 76],
    [21, 10, 14, 20, 14, 8, 48, 59, 46, 34, 64, 56, 45, 8, 31, 24, 42, 43, 50, 22, 31, 42, 25, 23, 41, 11, 18, 15, 59,
     23, 56, 71, 0, 6, 48, 26, 46, 19, 25, 60, 52, 20, 57, 35, 24],
    [13, 3, 14, 13, 9, 8, 45, 62, 50, 28, 62, 50, 40, 12, 26, 19, 45, 46, 53, 16, 26, 38, 19, 25, 37, 5, 20, 6, 56, 26,
     50, 73, 6, 0, 49, 26, 50, 13, 21, 65, 54, 24, 58, 39, 19],
    [53, 46, 49, 54, 49, 49, 40, 45, 58, 35, 15, 29, 42, 50, 59, 44, 49, 51, 19, 39, 59, 49, 45, 60, 61, 46, 52, 50, 10,
     49, 29, 84, 48, 49, 0, 37, 67, 62, 68, 65, 9, 41, 33, 62, 44],
    [30, 24, 27, 32, 26, 27, 23, 48, 36, 13, 52, 39, 21, 28, 38, 21, 29, 30, 39, 17, 37, 24, 22, 39, 36, 24, 31, 28, 45,
     26, 39, 70, 26, 26, 37, 0, 46, 36, 44, 51, 41, 18, 46, 40, 21],
    [55, 49, 45, 52, 49, 47, 61, 58, 28, 43, 75, 70, 59, 48, 50, 60, 34, 36, 62, 56, 53, 56, 61, 38, 52, 48, 45, 52, 70,
     41, 70, 40, 46, 50, 67, 46, 0, 58, 41, 60, 58, 49, 71, 24, 60],
    [25, 18, 18, 1, 14, 18, 58, 77, 50, 40, 76, 65, 54, 24, 26, 32, 59, 61, 68, 28, 19, 51, 32, 24, 42, 16, 19, 21, 71,
     38, 65, 78, 19, 13, 62, 36, 58, 0, 17, 70, 58, 29, 63, 42, 32],
    [30, 25, 19, 18, 21, 23, 64, 67, 34, 49, 71, 72, 60, 32, 26, 38, 45, 50, 58, 36, 26, 57, 38, 5, 37, 23, 19, 30, 76,
     31, 72, 60, 25, 21, 68, 44, 41, 17, 0, 64, 63, 27, 68, 29, 38],
    [68, 0, 64, 71, 65, 62, 65, 56, 52, 48, 74, 74, 64, 61, 76, 63, 35, 37, 61, 56, 76, 66, 59, 65, 78, 62, 59, 65, 69,
     63, 74, 52, 60, 65, 65, 51, 60, 70, 64, 0, 63, 52, 76, 59, 63],
    [57, 50, 54, 59, 55, 53, 44, 41, 55, 39, 16, 36, 46, 55, 64, 48, 42, 44, 24, 43, 64, 53, 49, 65, 65, 50, 57, 54, 11,
     45, 36, 79, 52, 54, 9, 41, 58, 58, 63, 63, 0, 38, 40, 59, 48],
    [28, 24, 24, 30, 24, 22, 34, 45, 36, 21, 49, 44, 35, 21, 41, 21, 29, 29, 36, 16, 42, 37, 20, 28, 52, 23, 20, 26, 45,
     17, 44, 68, 20, 24, 41, 18, 49, 29, 27, 52, 38, 0, 50, 37, 21],
    [62, 55, 60, 64, 59, 58, 49, 42, 65, 43, 44, 15, 51, 59, 68, 53, 57, 59, 43, 48, 68, 58, 54, 70, 69, 55, 63, 59, 36,
     59, 15, 93, 57, 58, 33, 46, 71, 63, 68, 76, 40, 50, 0, 66, 53],
    [44, 39, 33, 42, 38, 35, 53, 67, 29, 38, 71, 65, 50, 38, 34, 50, 35, 36, 58, 46, 43, 45, 50, 27, 41, 37, 34, 41, 66,
     30, 65, 44, 35, 39, 62, 40, 24, 42, 29, 59, 59, 37, 66, 0, 50],
    [23, 19, 21, 26, 19, 23, 30, 57, 46, 24, 58, 46, 31, 23, 23, 0, 40, 44, 51, 13, 20, 29, 5, 41, 33, 24, 27, 25, 54,
     28, 50, 76, 24, 19, 44, 21, 60, 32, 38, 63, 48, 21, 53, 50, ]]
avg_com_dis = 84
avg_car_dis = 42

days = ''
mode = ''  # '打车自驾','公共交通'
city = ''
style = ''  # '轻缓舒适型','节奏紧凑型'
day_len = 5
single_day = []
res = []
expection = []


def insert_site(idx_site, day):  # day=0, 1, ..., n-1
    global res
    if (site[idx_site].time <= single_day[day]):
        res[day].append(idx_site)
        single_day[day] = single_day[day] - site[idx_site].time
        go[idx_site] = True
        return True
    else:
        return False


def plan():
    if len(single_day) == 0:
        return
    avg_dis = 0
    if mode == '公共交通':
        graph = dis_common
        avg_dis = avg_com_dis
    else:
        graph = dis_car
        avg_dis = avg_car_dis

    # insert favorite
    been_dsn = False
    global expection, res
    if len(expection) > 0:
        cur = site[expection[0]].time
        if cur == 3:
            for i in range(len(single_day)):
                if insert_site(expection[0], i):
                    expection.remove(expection[0])
                    been_dsn = True
                    break
        elif cur == 2:
            if single_day[0] == 2:
                insert_site(expection[0], 0)
                expection.remove(expection[0])
            elif single_day[len(single_day) - 1] == 2:
                insert_site(expection[0], len(single_day) - 1)
                expection.remove(expection[0])
            else:
                for i in range(1, len(single_day) - 1):
                    if insert_site(expection[0], i):
                        expection.remove(expection[0])
                        break
        else:
            if single_day[0] == 1:
                insert_site(expection[0], 0)
                expection.remove(expection[0])
            elif single_day[len(single_day) - 1] == 1:
                insert_site(expection[0], len(single_day) - 1)
                expection.remove(expection[0])
            else:
                for i in range(len(single_day)):
                    if insert_site(expection[0], i):
                        expection.remove(expection[0])
                        break

    tot_t = 0
    for i in range(len(single_day)):
        tot_t += single_day[i]
    exp_t = 0
    for i in range(len(expection)):
        exp_t += site[expection[i]].time
        if exp_t > int(0.95 * tot_t):
            tmp = expection
            while len(tmp) > i:
                expection.remove(tmp[-1])
            break
    # insert 3
    if been_dsn:
        pass
    else:
        for i in range(len(expection)):
            if site[expection[i]].time == 3:
                for j in range(len(single_day)):
                    if insert_site(expection[i], j):
                        expection.remove(expection[i])
                        break
                break
    # insert 2
    pre_exp = copy.deepcopy(expection)
    for i in range(len(pre_exp)):
        if site[pre_exp[i]].time == 2:
            for j in range(day_len):
                if len(res[j]) == 0:
                    if insert_site(pre_exp[i], j):
                        expection.remove(pre_exp[i])
                        break
                else:
                    temp_d = 0
                    for k in range(len(res[j])):
                        temp_d += graph[res[j][k]][pre_exp[i]]
                    if temp_d / (len(res[j])) <= int(avg_dis / 2.5):
                        if insert_site(pre_exp[i], j):
                            expection.remove(pre_exp[i])
                        break
    m_ex = expection
    m_va = 100000
    for a in itertools.permutations(expection, len(expection)):
        ts = graph[len(site) - 1][a[0]] + graph[len(site) - 1][a[-1]]
        for j in range(len(a) - 1):
            ts += graph[a[j]][a[j + 1]]
            if ts < m_va:
                m_ex = a
                m_va = ts
    expection = list(m_ex)

    for i in range(len(expection)):
        for j in range(len(single_day)):
            if single_day[j] > 0 and insert_site(expection[i], j):
                break

    for i in range(len(single_day)):
        while single_day[i] > 0:
            for j in range(0, len(site), (day_len % 2) + 2):
                if (go[j] == False) and insert_site(j, i):
                    break
    for i in range(len(res)):
        if len(res[i]) > 1:
            min_plan = res[i]
            min_val = 100000
            for ar in itertools.permutations(res[i], len(res[i])):
                t_sum = graph[len(site) - 1][ar[0]] + graph[len(site) - 1][ar[-1]]
                for j in range(len(ar) - 1):
                    t_sum += graph[ar[j]][ar[j + 1]]
                if t_sum < min_val:
                    min_val = t_sum
                    min_plan = ar
            res[i] = list(min_plan)









app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:cui,logic@127.0.0.1/app'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = '24'
db = SQLAlchemy(app)


# 数据库：用户信息表
class Users(db.Model):
    __tablename__ = 'users'
    phonenum = db.Column(db.String(20), primary_key=True)
    name = db.Column(db.String(20))
    passwd = db.Column(db.String(20))


# 首页
# 登录界面（用户信息表查询）
@app.route('/')
@app.route('/login', methods=['POST', 'GET'])
def login():
    phone = ''
    passwd = ''
    if request.method == 'POST':
        phone = request.form.get('phone')
        passwd = request.form.get('passwd')

    userlist = db.session.query(Users)
    flag = 0
    for user in userlist:
        if user.phonenum == phone:
            if user.passwd == passwd:
                flag = 1
            else:
                flag = 2
            break
    if flag == 1:
        return redirect(url_for('choose'))
    else:
        if phone != '' and passwd != '':
            if flag == 0:
                flash("手机号还未注册！")
            else:
                flash("密码错误！")
        return render_template('Home Page.html')


# 注册界面（用户信息表添加）
@app.route('/register', methods=['POST', 'GET'])
def register():
    if request.method == 'POST':
        username = request.form.get('username', type=str, default=None)
        userphone = request.form.get('userphone', type=str, default=None)
        userpasswd = request.form.get('userpasswd', type=str, default=None)
        user = Users(phonenum=userphone, name=username, passwd=userpasswd)
        db.session.add(user)
        db.session.commit()
        return render_template('Home Page.html')
    else:
        return render_template('Login.html')


# 忘记密码（用户信息修改）
@app.route('/change', methods=['POST', 'GET'])
def change():
    if request.method == 'POST':
        userphone = request.form.get('userphone', type=str, default=None)
        userpasswd = request.form.get('userpasswd', type=str, default=None)
        userpasswd2 = request.form.get('userpasswd2', type=str, default=None)
        if userpasswd == userpasswd2:
            flag = 0
            userlist = db.session.query(Users)
            for user in userlist:
                if user.phonenum == userphone:
                    user.passwd = userpasswd
                    db.session.commit()
                    flag = 1
                    break
            if flag == 1:
                return render_template('Home Page.html')
            else:
                flash("手机号还未注册！")
                return render_template('Forget password.html')
        else:
            flash("密码确认错误！")
            return render_template('Forget password.html')
    else:
        return render_template('Forget password.html')


# 服务条款
@app.route('/service')
def service():
    return render_template("Service.html")


# 关于我们
@app.route('/aboutus')
def aboutus():
    return render_template("We.html")


# 新闻中心
@app.route('/news')
def news():
    return render_template("News.html")


# 使用指南
@app.route('/help')
def help():
    return render_template("Help.html")


# 选择界面

@app.route('/choose', methods=['POST', 'GET'])
def choose():
    global days
    global mode
    global city
    global style
    global res
    if request.method == 'POST':
        days = request.form.get('days', type=str, default=None)
        mode = request.form.get('mode', type=str, default=None)
        city = request.form.get('city', type=str, default=None)
        style = request.form.get('style', type=str, default=None)
        if days == '':
            flash("请选择日期！（先选择截止日期，再选择天数，出发日期自动生成）")
            return render_template("index.html")
        elif mode == '':
            flash("请选择出行模式！")
            return render_template("index.html")
        elif city == '':
            flash("请选择城市！")
            return render_template("index.html")
        elif style == '':
            flash("请选择出行节奏！")
            return render_template("index.html")
        else:
            day_len = int(days)
            site_cnt = 3
            if style == '轻缓舒适型':
                site_cnt += 1
            for i in range(day_len):
                single_day.append(site_cnt)
                res.append([])
            return redirect(url_for('map'))
    else:
        return render_template("index.html")


# 地图界面
userlist = []
@app.route('/map', methods=['POST', 'GET'])
def map():
    global userlist
    global expection
    # userlist = json.loads(request.form.get('attraction_str'))
    if request.method == 'POST':
        userlist = request.form.get('list')
        print(userlist)
        if userlist:
            userlist = [1, 2, 3, 4]
            expection = userlist
            plan()
            return redirect(url_for('self'))
        else:
            # flash
            render_template("Third.html")
    else:
        return render_template("Third.html")


# 个人中心
@app.route('/self')
def self():
    global res
    global day_len
    for i in range(len(res)):
        for j in range(len(res[i])):
            res[i][j] = res[i][j] + 1
    return render_template("Forth.html", res=res, len=len(res))


if __name__ == '__main__':
    # db.drop_all()
    # db.create_all()
    app.run()